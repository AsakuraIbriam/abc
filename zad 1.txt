#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <string.h>
#include <stdint.h>

#include <math.h>

#define COUNT 10


    typedef struct {
    char model[20];
    uint8_t maxspeed;
    double price;
    }Car;








int compareBrandsNameAsc(const void * p1, const void * p2);
int compareBrandsNameDesc(const void * p1, const void * p2);
int comparePricesAscending(const void * p1, const void * p2);
int comparePricesDescending(const void * p1, const void * p2);
int compareIntsAscending(const void * p1, const void * p2);
int compareIntsDescending(const void * p1, const void * p2);
int main()
{
        srand(time(NULL));
        Car cars[COUNT];

        const char names[][10] = {"Ford", "Fiat", "Baby", "Lexos",
                                "Honda", "Toyota", "Huyndai", "Volkswagen", "BMW", "AUDI"};


        const uint8_t speeds[10] ={260, 180, 220, 210, 320, 140, 260, 230, 300, 120};
        const double prices[10] = {30000, 10000, 56785.24, 100389.67, 87452.89, 46532.99, 23456, 56732, 40000, 180000};

        for(int i = 0; i < COUNT; i++) {
            strcpy(cars[i].model, names[rand()%10]);

            cars[i].maxspeed= speeds[rand()%10];

            cars[i].price = prices[rand()%10];
        }

        size_t elementsN = (size_t)COUNT;
        size_t singleElementsSize = sizeof(Car);

        int (*fsp[6])(const void *, const void *) = {compareBrandsNameAsc, compareBrandsNameDesc, compareIntsAscending, compareIntsDescending, comparePricesAscending, comparePricesDescending};


        for(int i = 0; i < 6; i++) {

            qsort(cars, elementsN, singleElementsSize, fsp[i]);

            if(i == 0) {
                    printf("\t\t----Compared by brand Ascending:----\t\t\n");
                    for(int j = 0; j < COUNT; j++){
                    printf("%d. %s\n",j+1, cars[j].model);
                    }
            }   else if(i == 1) {
                   printf("\t\t----Compared by brand Descending:----\t\t\\n");
                    for(int j = 0; j < COUNT; j++) {
                    printf("%d. %s \n",j+1, cars[j].model);
                    }
            } else if (i == 2){
                        printf("\t\t-----Compared by speed Ascending:------\t\t\n");
                     for(int j = 0; j < COUNT; j++) {
                    printf("%d. %u\n",j+1, cars[j].maxspeed);
                    }
                } else if(i == 3) {
                    printf("\t\t-----Compared by speed Descending:------\t\t\n");
                     for(int j = 0; j < COUNT; j++) {
                    printf("%d. %u\n",j+1, cars[j].maxspeed);
                     }

                }  else if(i == 4) {

                    printf("\t\t-----Compared by price Adcending:------\t\t\n");
                     for(int j = 0; j < COUNT; j++) {
                    printf("%d. %2.lf \n",j+1, cars[j].price);
                }
                }   else {
                    printf("\t\t-----Compared by price Descending:------\t\t\n");
                    for(int j = 0; j < COUNT; j++) {
                    printf("%d. %.2lf\n",j+1, cars[j].price);
                    }
                    }
                    printf("\n\n\n");
                }







 return 0;
}


int compareBrandsNameAsc(const void * p1, const void * p2) {
    Car *d1 = (Car*)p1;
    Car *d2 = (Car*)p2;
    char c1 = d1->model[0];
    char c2 = d2->model[0];
    if(c1 == c2) {
        return 0;
    } else if(c1 > c2) {
        return 1;
    } else {
        return -1;
    }

}
int compareBrandsNameDesc(const void * p1, const void * p2){
        Car *d1 = (Car*)p1;
        Car *d2 = (Car*)p2;
        char c1 = d1->model[0];
        char c2 = d2->model[0];
        if(c1 == c2) {
            return 0;
        } else if(c1 > c2) {
            return -1;
        } else {
            return 1;
        }
}



int comparePricesAscending(const void * p1, const void * p2) {
    Car *d1 = (Car *)p1;
    Car *d2 = (Car *)p2;
    if(fabs(d1->price - d2->price) < 0.001) {
        return 0;
    } else if(d1->price > d2->price) {
        return 1;
    } else {
        return -1;
    }
}

int comparePricesDescending(const void * p1, const void * p2) {
    Car *d1 = (Car *)p1;
    Car *d2 = (Car *)p2;
    if(fabs(d2->price - d1->price) < 0.001) {
        return 0;
    } else if( d2->price > d1->price) {
        return 1;
    } else {
        return -1;
    }
}



int compareIntsAscending(const void * p1, const void * p2){
    Car *d1 = (Car*)p1;
    Car *d2 = (Car*)p2;
    return d1->maxspeed > d2->maxspeed;
}


int compareIntsDescending(const void * p1, const void * p2){
    Car *d1 = (Car*)p1;
    Car *d2 = (Car*)p2;
    return d2->maxspeed > d1->maxspeed;
}
